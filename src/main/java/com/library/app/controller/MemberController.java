package com.library.app.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;

import com.library.app.model.Members;
import com.library.app.repository.MemberRepository;

@Controller // This means that this class is a Controller
public class MemberController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MemberRepository memberRepository;

    @CrossOrigin(origins = "http://localhost:3000")
    @GetMapping(path = "/members")
    public @ResponseBody Iterable<Members> getAllMember() {
        // This returns a JSON or XML with the users
        return memberRepository.findAll();
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @GetMapping(path = "/members/{id}")
    public @ResponseBody Members getSelectedMember(@PathVariable Integer id) {
        // This returns a JSON or XML with the users

        // sata mau ini returnnya format yang tadi
        return memberRepository.findById(id).orElse(null);
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path = "/members", consumes = "application/json")
    public @ResponseBody String addMember(@RequestBody Members payload) {
        memberRepository.save(payload);

        return "Success";
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PatchMapping(path = "/members/{id}", consumes = "application/json")
    public @ResponseBody String editMember(@PathVariable Integer id, @RequestBody Members payload) {
        // Retrieve the existing members from the database
        Optional<Members> optionalMember = memberRepository.findById(id);

        if (optionalMember.isPresent()) {
            // Update the existing members entity with new data from payload
            Members existingMember = optionalMember.get();
            existingMember.setName(payload.getName());
            existingMember.setCode(payload.getCode());
            existingMember.setEmail(payload.getEmail());
            existingMember.setPhone(payload.getPhone());
            existingMember.setAddress(payload.getAddress());

            // Save the updated members entity
            memberRepository.save(existingMember);

            return "Success";
        } else {
            // Handle case where members with given id is not found
            return "Member not found";
        }
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @DeleteMapping(path = "/members/{id}")
    public @ResponseBody String deleteMember(@PathVariable Integer id) {
        // Check if the Member exists
        Optional<Members> optionalMember = memberRepository.findById(id);

        if (optionalMember.isPresent()) {
            // Member found, delete it
            memberRepository.deleteById(id);
            return "Member deleted successfully";
        } else {
            // Member not found
            return "Member not found";
        }
    }
}
