package com.library.app.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.library.app.model.Books;
import com.library.app.repository.BookRepository;

@Controller // This means that this class is a Controller
@RestController
public class BookController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BookRepository bookRepository;

    @CrossOrigin(origins = "http://localhost:3000")
    @GetMapping(path = "/books")
    public @ResponseBody Iterable<Books> getAllBooks() {
        // This returns a JSON or XML with the users
        return bookRepository.findAll();
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @GetMapping(path = "/books/{id}")
    public @ResponseBody Books getSelectedBook(@PathVariable Integer id) {
        // This returns a JSON or XML with the users

        // sata mau ini returnnya format yang tadi
        return bookRepository.findById(id).orElse(null);
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path = "/books", consumes = "application/json")
    public @ResponseBody String addBook(@RequestBody Books payload) {
        bookRepository.save(payload);

        return "Success";
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PatchMapping(path = "/books/{id}", consumes = "application/json")
    public @ResponseBody String editBook(@PathVariable Integer id, @RequestBody Books payload) {
        // Retrieve the existing book from the database
        Optional<Books> optionalBook = bookRepository.findById(id);

        if (optionalBook.isPresent()) {
            // Update the existing book entity with new data from payload
            Books existingBook = optionalBook.get();
            existingBook.setName(payload.getName());
            existingBook.setAuthor(payload.getAuthor());
            existingBook.setPublisher(payload.getPublisher());
            existingBook.setPublishDate(payload.getPublishDate());
            existingBook.setIsbn(payload.getIsbn());
            existingBook.setTotal(payload.getTotal());

            // Save the updated book entity
            bookRepository.save(existingBook);

            return "Success";
        } else {
            // Handle case where book with given id is not found
            return "Book not found";
        }
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @DeleteMapping(path = "/books/{id}")
    public @ResponseBody String deleteBook(@PathVariable Integer id) {
        // Check if the book exists
        Optional<Books> optionalBook = bookRepository.findById(id);

        if (optionalBook.isPresent()) {
            // Book found, delete it
            bookRepository.deleteById(id);
            return "Book deleted successfully";
        } else {
            // Book not found
            return "Book not found";
        }
    }
}
