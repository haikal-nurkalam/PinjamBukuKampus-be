package com.library.app.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;

import com.library.app.model.Transactions;
import com.library.app.repository.TransactionRepository;

@Controller // This means that this class is a Controller
public class TransactionController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TransactionRepository transactionRepository;

    @CrossOrigin(origins = "http://localhost:3000")
    @GetMapping(path = "/transactions")
    public @ResponseBody Iterable<Transactions> getAllTransaction() {
        // This returns a JSON or XML with the users
        return transactionRepository.findAll();
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @GetMapping(path = "/transactions/{id}")
    public @ResponseBody Transactions getSelectedTransaction(@PathVariable Integer id) {
        // This returns a JSON or XML with the users

        // sata mau ini returnnya format yang tadi
        return transactionRepository.findById(id).orElse(null);
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path = "/transactions", consumes = "application/json")
    public @ResponseBody String addTransaction(@RequestBody Transactions payload) {
        transactionRepository.save(payload);

        return "Success";
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PatchMapping(path = "/transactions/{id}", consumes = "application/json")
    public @ResponseBody String editTransaction(@PathVariable Integer id, @RequestBody Transactions payload) {
        // Retrieve the existing transaction from the database
        Optional<Transactions> optionalTransaction = transactionRepository.findById(id);

        if (optionalTransaction.isPresent()) {
            // Update the existing transaction entity with new data from payload
            Transactions existingTransaction = optionalTransaction.get();

            existingTransaction.setBookId(payload.getBookId());
            existingTransaction.setMemberId(payload.getMemberId());
            existingTransaction.setStatusId(payload.getStatusId());
            existingTransaction.setLoanStartDate(payload.getLoanStartDate());
            existingTransaction.setLoanEndDate(payload.getLoanEndDate());

            // Save the updated transaction entity
            transactionRepository.save(existingTransaction);

            return "Success";
        } else {
            // Handle case where transaction with given id is not found
            return "Transaction not found";
        }
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @DeleteMapping(path = "/transactions/{id}")
    public @ResponseBody String deleteTransaction(@PathVariable Integer id) {
        // Check if the Transaction exists
        Optional<Transactions> optionalTransaction = transactionRepository.findById(id);

        if (optionalTransaction.isPresent()) {
            // Transaction found, delete it
            transactionRepository.deleteById(id);
            return "Transaction deleted successfully";
        } else {
            // Transaction not found
            return "Transaction not found";
        }
    }
}
